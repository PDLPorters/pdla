What follows is that task list and description of
the work planned for the future  PDLA-2.x releases.


+-------------------------------------------------------+
|       Candidate Tasks for PDLA-2.x Development         |
+-------------------------------------------------------+

   This section documents the top level tasks from
   the more detailed list below.  The first column
   of the line indicates the priority of that item
   (and those below it) for the PDLA-2.x release:

     T -- TBD
     R -- required for release to occur
     N -- nice to have but not mandatory
     no mark means same as super bullet or FYI
     D -- done

  Each item has some task description based on the
  current status.

  Update task list after PDLA-2.x release.

  

+-------------------------------------------------------+
|                                                       |
|              PDLA-2.x BULLET TASK LISTING              |
|                   ( BY CATEGORY )                     |
|                                                       |
+-------------------------------------------------------+



+-------------------------------------------------------+
|                       TESTING                         |
+-------------------------------------------------------+

   Need to test PDLA build from scratch both WITH_BADVAL and without
   * Find a way to automate this process for release testing
   * Unix/Linux/BSD
   * Windows
     - cygwin
     - activestate perl
     - strawberry perl
   * Mac OS X


   Verify dependency detection across all major PDLA platforms
   * Unix/Linux/BSD, Windows(ASPerl/Strawberry)/Cygwin, Mac OS X
   * Check completely clean build each platform
   * Confirm that dependencies for each platform
       are correctly detected and reported.
   * Add any issues to Known_problems


   These modules aren't tested by CPAN Testers because of dependencies:
   * PDLA::Slatec
   * PDLA::Minuit
     - need Fortran compilter and ExtUtils::F77
   * PDLA::IO::GD
     - needs libgd
     - Alien::GD
   * PDLA::IO::HDF
     - based on HDF4
     - Alien::HDF
     - Alien::HDF5
     - add binding to libhdf5
   * PDLA::GSL::XXX
     - need more complete libgsl bindings
     - Alien::GSL
   * PDLA::GIS::Proj
     - duplicate code with Alien::Proj4 needs de-dup-ing
   * PDLA::Graphics::TriD
     - Alien::OpenGL, GLU, GLEW, GLUT, GLUI...
     - test with pixel buffer context(?)
   * PDLA::Graphics::PGPLOT
     - needs portable driver (OpenGL)
     - Alien::PGPLOT
     - apply/update RGB color patches to current
   * PDLA::IO::Browser
     - need curses/ncurses
     - Alien::Curses
     - maybe OpenGL terminal or widget
     - need something lightweight
     - add support for pdls having >2 dims


   Add support for Known_problems to tests
   * Use skip for tests with segfault fails
   * All bug reports should have a test in PDLA/t


   Clean up and triage for tickets prior to release.
   * Bugs
   * Feature requests
   * Patches



+-------------------------------------------------------+
|                    DEPENDENCIES                       |
+-------------------------------------------------------+
   
   Alien modules for the external PDLA dependencies
   * Alien::PROJ4


   Define standard paths for external dependency libraries for PDLA
   * See File::ShareDir::Install and File::ShareDir
   * Can skip install if system-wide is available
   * Relocatable with package-config or Alien info
   * Document any PDLA-specific install locations
   * This should allow for a devel-PDLA install for win32

   
   List and obtain module owners and developers for existing PDLA modules
   * Revisit each module's status by platform
     * Regarding portability
     * Review external dependency handling
     * Update plan for development


   Fix/document FORTRAN code requirements
   * Add a USE_FORTRAN option to perldl.conf
   * Add check for ExtUtils:F77
   

   Fix IO/Browser build to properly check for the curses
     library and build if available.


+-------------------------------------------------------+
|                    DOCUMENTATION                      |
+-------------------------------------------------------+
   
   Update PDLA web site pages 
   

   Review current documentation (underway)
   * Verify correctness and consistency with PDLA-2.x
   * Update documentation where needed.
   * Add web searchable versions of the docs.
   * Maybe a wiki format could be used to improve docs 


   Add/update platform install notes to PDLA wiki
   * Complete build-from-scratch installs
   * Soup to nuts via the cpan shell
   * Build issues and their fixes
   * How to get needed dependencies
   * Other platform details
     * Mac OS X
     * Linux (by distribution and version)
     * BSD
     * Solaris
     * Windows
     * Cygwin
     * Other 


   Add CPAN shell start-up info to PDLA wiki or web page
   * CPANminus/perlbrew seems to be best approach
   - Basic CPAN more complicated


   Add CPAN Testers start up info to PDLA wiki
   * Test::Reporter
   * CPAN Testers version 2
   * Easy/basic install and usage

     The new CPAN Testers version 2.0 has been
     released.  It uses a web-based interface to
     send reports rather than email.  As a result
     is is much easier to configure than the old
     interface.  As such, we would get better PDLA
     feedback if we have a quick-start for that.

     Add info for PERL_CPAN_REPORTER_DIR variable.


   Document how to set up a local sandbox for PDLA build
   * INSTALL_BASE for EU::MM > 6.31 and --install_base for M:B 
   * Need to cover adding bin to paths and any library issues
   * Build with CPAN shell or cpanm
   * Check out brewperl

     A number of PDLA users are configuring their
     own local library, perl, and PDLA installations.
     It would be nice if clear directions were
     written down so everyone doesn't have to
     reinvent the same wheel.


   Add docs/support for users of other software
   * IDL, Matlab, NumPy
   * Add help for equivalent PDLA constructs
   

   Update PDLA Book (in progress)
   * Needs updating to match PDLA-2.x
   * make a web version available on-line if possible
   

   Better document the PDLA help system
   * Requirements and usage
   * Quick start
   * Add custom/user key word search support
   * Is there a way to fetch all the functions/keywords
       the PDLA help system supports? 
   

   
+-------------------------------------------------------+
|                      USABILITY                        |
+-------------------------------------------------------+
   
   Improve PDLA usability for first time users
   * Work out-of-the-box via cpan[m] shell
     * Fully automatic
     * Semi-manual
   * Easy install via 1-click or package managers 
   * PAR for distribution
   * Should be able to upgrade PDLA ppd install on win32

     A simple cpan or platform package install should
     work out of the box.  Maybe not all dependencies
     will build but PDLA should build with 2D and 3D
     graphics support for most/all platforms.


   Implement "1-click" installs by platform and document in wiki
   * Mac OS X: SciKarl, verify support by OS versions
   * Windows: Strawberry Perl Professional, ActivePerl
   * Unix OSes: Various package managers
   

   Replace inconsistent minimum and maximum subs in Ufunc
   by maxover and minover which is consistent with all the
   other usages:

       average       -> avgover
       daverage      -> davgover
       maximum       -> maxover
       maximum_ind   -> maxover_ind
       maximum_n_ind -> maxover_n_ind
       minimum       -> minover
       minimum_ind   -> minover_ind
       minimum_n_ind -> minover_n_ind
       minmaximum    -> minmaxover

   
+-------------------------------------------------------+
|                    INSTALLATION                       |
+-------------------------------------------------------+
   
   Switch from ExtUtils::MakeMaker to Module::Build
   * May be better to go with Module::Install
     * More flexible
     * More familiar
     * Builds faster
   * Removes portability problems from shell and make
   * Easier to extend


   Fix the test problems with preexisting PDLA installs
   * Add warning if binary api has changed or if there
       are other dependent PDLA modules that would need
       to be updated.
   * Develop test methodology
   * Add PDLA::Core::Dev utility to perform check
   * Automate detection/test skip if not built logic

   
   Check/set perldl.conf options before the build
   * Add WITH_CORE_ONLY to perldl.conf
   * Add WITH_FORTRAN to perldl.conf
   * Interactive option view prompt() in Makefile.PL
   * GUI version


   
+-------------------------------------------------------+
|                    NEW FEATURES                       |
+-------------------------------------------------------+

   Finish PDLA::IO::ENVI module
   * Implement basic writeenvi() routine
   * Add tests and reimplement as a module
   * Add to PDLA distribution


   Complete Perldl2 shell:
   * Implement remaining perldl features for pdl2
   * Fix Ctrl-C handling for win32 systems
   * Update documentation
   * See Perldl2/TODO for the pdl2-specific list.


   Add support for 64bit data:
   * Add safe pdl allocation option to prevent OOM death
   D Update allocation and types to support 64bit data
   * Add info in PDLA::Config for level of 64bit support
     (e.g. STRLEN size vs ptrsize...)
   

   Add support for improved 2-D image display using OpenGL
   * Add threaded 2-D image tiled display to imag2d
   * Enable REPL and GUI simultaneous operations and event loops
     * perldl via ReadLine and FreeGLUT
     * REPL via ReadLine and FreeGLUT 
     * Maybe for wxWidgets for Padre support
   * Implement some tests

   
   New pdl() constructor with matlab [] syntax for string arguments
   * Needs more testing and verification
   * Does it work for MATLAB and PDLA users' purposes? 
     * Handle complex numbers (with i,j for sqrt(-1))
     * Handle cut and paste of printed piddles
     * Better error checking for invalid values
   
     Ideally we should be able to cut-n-paste the print
     output of a piddle into the constructor as a
     string and get the piddle back (within float eps).


   Finish spheres3d implementation
   * Add color (RGB+A) support
   * Add per-sphere radius (support threading)
   * Add surface normals for smooth shading
   * Extend to arbitrary objects with constructors
  

  Refactor TriD/PDLA for better animation
  * interoperate better with OpenGL display
  * clean up OO structure and document (use Moo[se])
  * implement pipeline stream to wmpeg
  * stream PDLA slice (with no make-physical)
  * add dataflow callback to support display updates

  
  NiceSlice cleanup
  * refactor to use Module::Compile / Filter::Simple
  * implement string processing version for REPL use
    - .pmc generation via Module::Compile
    - Smarter parsing via Filter::Simple
    - Optimize sourcecode filter for speed
  * document nslice
  * implement a niceslice method
  * enhance nslice() to handle CODE refs
    * Done but it doesn't buy much since it only
      works if the CODE ref is a blessed object
      so that a UNIVERSAL::nslice method can be
      called on it.
    * maybe defer/lazy source filtering
    * check if valid subref args good for slicing
    * can use string eval with notrans



+-------------------------------------------------------+
|                        LATER                          |
+-------------------------------------------------------+
   
   PDLA::Constants
   * Transition into 'use PDLA;'
   * Add other constants of interest
     * Units
     D Complex i,j
     * Inf
     * To import or not to import
   

   PDLA::Matlab helper module
   * Implement key set of basic Matlab functions
   * MATLAB "expand" to PDLA syntax?
   * Document PDLA equivalents
   * Add who/whos refs or links to pdl2 'help vars'

   
   Fix external dependency processing
   * Implement Alien::Base::CheckLib
     - provides detection part of Alien manifesto
     - based on Devel::CheckLib to detect headers and libraries
     - need to be fully cross-platform
   * Remove dependencies on external commands (e.g. clear in Demos)
   * Make missing functionality detectable at run time
   * Could use warning/error stubs if functionality not available
   * Alien modules for the external PDLA dependencies
     * Alien::Curses
     * Alien::FFTW
     * Alien::FFTW3
     * Alien::GSL
     * Alien::GD
     * Alien::GLUI
     * Alien::HDF
     * Alien::HDF5
     * Alien::JPEG
     * Alien::NetPBM
     * Alien::OpenGL, Alien::GLUT, Alien::GLX, Alien::GLEW
     * Alien::PGPLOT
     * Alien::PNG
     * Alien::TIFF
   

   Full GSL bindings for PDLA
   * Alien::GSL to install and something else to check
   * Prioritize GSL functionality to add
   * Convert GSL documentation to PDLA usable form
   * Automate code conversion
     * Can we use Math::GSL as a starting point?
     * What about an PDLA::PP version using GSL configure info for thread support? 
   * Slatec compatibility wrappers 
   

   Clean and unify the FFT and FFTW in PDLA
   * FFT is the default implementation
     * Add FFTW acceleration for the default FFT
     * Add cleaner use of complex values to FFT routines
   * Make non-inplace versions of FFT
     D Make default FFT library match FFTW calling conventions
   * Document FFT/FFTW
     * The computational algorithms
     * The input/output locations 
   

   Update HDF docs
   * HDF5 and HDF4 are entirely different beasts (and totally incompatible)
   * The PDLA::IO::HDF library uses HDF4.
   * Portability issues especially re. Installs 
